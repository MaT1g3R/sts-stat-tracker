package pages

import (
	"github.com/MaT1g3R/stats-tracker/components/avatar"
	"github.com/MaT1g3R/stats-tracker/components/card"
	"github.com/MaT1g3R/stats-tracker/components/checkbox"
	"github.com/MaT1g3R/stats-tracker/components/form"
	"github.com/MaT1g3R/stats-tracker/components/selectbox"
	"github.com/MaT1g3R/stats-tracker/internal/ui/components/localtime"
	"github.com/MaT1g3R/stats-tracker/internal/ui/layout"
	"time"
)

templ Player(name string, lastSeen time.Time) {
	@PlayerPage(PlayerPageProps{
		Name:             name,
		LastSeen:         lastSeen,
		GameVersion:      "sts1",
		Character:        "all",
		IncludeAbandoned: false,
		StatType:         "Overview",
	})
}

templ PlayerPage(props PlayerPageProps) {
	@layout.BaseLayout("/app/players") {
		<div class="container mx-auto px-4 py-8">
			<div class="max-w-6xl mx-auto">
				<!-- Player Header -->
				<div class="mb-8">
					@card.Card() {
						<div class="flex items-center gap-4 p-6">
							@avatar.Avatar(avatar.Props{
								Size: "lg",
							}) {
								@avatar.Image(avatar.ImageProps{
									Src: props.AvatarURL,
								})
							}
							<div>
								<h1 class="text-3xl font-bold">{ props.Name }</h1>
								<p class="text-gray-600">
									Last seen:
									@localtime.LocalTime(localtime.Props{
										Time: props.LastSeen,
									})
								</p>
							</div>
						</div>
					}
				</div>
				<!-- Filter Controls -->
				<div class="mb-8">
					@card.Card() {
						<div class="p-6">
							<h2 class="text-xl font-semibold mb-4">Filters</h2>
							<form id="player-filters" class="space-y-6">
								<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
									<!-- Profile Dropdown -->
									@form.Item() {
										@form.Label(form.LabelProps{For: "profile-name"}) {
											Profile
										}
										@selectbox.SelectBox() {
											@selectbox.Trigger(selectbox.TriggerProps{
												ID:   "profile-name",
												Name: "profile-name",
												Attributes: templ.Attributes{
													"hx-get":       "/api/v1/players/" + props.Name + "/stats",
													"hx-trigger":   "load,change",
													"hx-target":    "#player-stats-content",
													"hx-include":   "#player-filters",
													"hx-indicator": "#loading-indicator",
													"hx-swap":      "innerHTML",
												},
											}) {
												@selectbox.Value() {
													for _, item := range props.Profiles {
														if props.SelectedProfile == item {
															{ item }
														}
													}
												}
											}
											@selectbox.Content() {
												for _, item := range props.Profiles {
													@selectbox.Item(selectbox.ItemProps{
														Value:    item,
														Selected: props.SelectedProfile == item,
													}) {
														{ item }
													}
												}
											}
										}
									}
									<!-- Game Version Dropdown -->
									@form.Item() {
										@form.Label(form.LabelProps{For: "game-version"}) {
											Game Version
										}
										@selectbox.SelectBox() {
											@selectbox.Trigger(selectbox.TriggerProps{
												ID:   "game-version",
												Name: "game-version",
												Attributes: templ.Attributes{
													"hx-get":       "/api/v1/players/" + props.Name + "/stats",
													"hx-trigger":   "change",
													"hx-target":    "#player-stats-content",
													"hx-include":   "#player-filters",
													"hx-indicator": "#loading-indicator",
												},
											}) {
												@selectbox.Value() {
													for _, item := range props.GameVersions {
														if props.GameVersion == item {
															{ GameVersionDisplay(item) }
														}
													}
												}
											}
											@selectbox.Content() {
												for _, item := range props.GameVersions {
													@selectbox.Item(selectbox.ItemProps{
														Value:    item,
														Selected: props.GameVersion == item,
													}) {
														{ GameVersionDisplay(item) }
													}
												}
											}
										}
									}
									<!-- Date Range: Start Date -->
									@form.Item() {
										@form.Label(form.LabelProps{For: "start-date"}) {
											Start Date
										}
										<div class="relative">
											<input
												type="date"
												id="start-date"
												name="start-date"
												class="w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
												value={ DateToString(props.StartDate) }
												hx-get={ "/api/v1/players/" + props.Name + "/stats" }
												hx-trigger="change"
												hx-target="#player-stats-content"
												hx-include="#player-filters"
												hx-indicator="#loading-indicator"
											/>
										</div>
									}
									<!-- Date Range: End Date -->
									@form.Item() {
										@form.Label(form.LabelProps{For: "end-date"}) {
											End Date
										}
										<div class="relative">
											<input
												type="date"
												id="end-date"
												name="end-date"
												class="w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
												value={ DateToString(props.EndDate) }
												hx-get={ "/api/v1/players/" + props.Name + "/stats" }
												hx-trigger="change"
												hx-target="#player-stats-content"
												hx-include="#player-filters"
												hx-indicator="#loading-indicator"
											/>
										</div>
									}
								</div>
								<!-- Character Dropdown -->
								@form.Item() {
									@form.Label(form.LabelProps{For: "character"}) {
										Character
									}
									@selectbox.SelectBox() {
										@selectbox.Trigger(selectbox.TriggerProps{
											ID:   "character",
											Name: "character",
											Attributes: templ.Attributes{
												"hx-get":       "/api/v1/players/" + props.Name + "/stats",
												"hx-trigger":   "change",
												"hx-target":    "#player-stats-content",
												"hx-include":   "#player-filters",
												"hx-indicator": "#loading-indicator",
											},
										}) {
											@selectbox.Value() {
												for _, item := range props.Characters {
													if props.Character == item {
														{ CharacterDisplay(item) }
													}
												}
											}
										}
										@selectbox.Content() {
											for _, item := range props.Characters {
												@selectbox.Item(selectbox.ItemProps{
													Value:    item,
													Selected: props.Character == item,
												}) {
													{ CharacterDisplay(item) }
												}
											}
										}
									}
								}
								<div class="flex flex-wrap items-center justify-between gap-4">
									<!-- Include Abandoned Runs Checkbox -->
									@form.ItemFlex() {
										@checkbox.Checkbox(checkbox.Props{
											ID:      "include-abandoned",
											Name:    "include-abandoned",
											Checked: props.IncludeAbandoned,
											Attributes: templ.Attributes{
												"hx-get":       "/api/v1/players/" + props.Name + "/stats",
												"hx-trigger":   "change",
												"hx-target":    "#player-stats-content",
												"hx-include":   "#player-filters",
												"hx-indicator": "#loading-indicator",
											},
										})
										@form.Label(form.LabelProps{
											For:   "include-abandoned",
											Class: "ml-2",
										}) {
											Include abandoned runs
										}
									}
									<!-- Stats Type Dropdown -->
									@form.ItemFlex() {
										@form.Label(form.LabelProps{For: "stat-type"}) {
											Stats Type:
										}
										@selectbox.SelectBox(selectbox.Props{Class: "ml-2"}) {
											@selectbox.Trigger(selectbox.TriggerProps{
												ID:   "stat-type",
												Name: "stat-type",
												Attributes: templ.Attributes{
													"hx-get":       "/api/v1/players/" + props.Name + "/stats",
													"hx-trigger":   "change",
													"hx-target":    "#player-stats-content",
													"hx-include":   "#player-filters",
													"hx-indicator": "#loading-indicator",
												},
											}) {
												@selectbox.Value() {
													for _, item := range props.StatTypeOptions {
														if props.StatType == item {
															{ item }
														}
													}
												}
											}
											@selectbox.Content() {
												for _, item := range props.StatTypeOptions {
													@selectbox.Item(selectbox.ItemProps{
														Value:    item,
														Selected: props.StatType == item,
													}) {
														{ item }
													}
												}
											}
										}
									}
								</div>
							</form>
						</div>
					}
				</div>
				<!-- Loading Indicator -->
				<div id="loading-indicator" class="htmx-indicator flex justify-center my-4">
					<div class="inline-flex items-center px-4 py-2 font-semibold leading-6 text-sm rounded-md text-white bg-blue-500 shadow">
						<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
							<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
							<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
						</svg>
						Loading stats...
					</div>
				</div>
				<!-- Stats Content -->
				<div id="player-stats-content" class="space-y-6"></div>
			</div>
		</div>
		<!-- Include the component scripts -->
	}
}

// PlayerStats renders the player statistics based on the current filters
templ PlayerStats(props PlayerPageProps, child templ.Component) {
	@card.Card() {
		<div class="p-6">
			<h2 class="text-xl font-semibold mb-4">{ props.StatType }</h2>
			<div class="text-sm text-gray-500 dark:text-gray-400 mb-4">
				<p>Profile: { props.SelectedProfile }</p>
				<p>Character: { CharacterDisplay(props.Character) }</p>
				<p>
					Date range:
					{ DateToString(props.StartDate) }
					{ " to " }
					{ DateToString(props.EndDate) }
				</p>
				if props.IncludeAbandoned {
					<p>Including abandoned runs: Yes</p>
				} else {
					<p>Including abandoned runs: No</p>
				}
			</div>
			@child
		</div>
	}
}
