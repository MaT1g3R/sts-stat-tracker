package pages

import (
	"fmt"
	"github.com/MaT1g3R/stats-tracker/components/card"
	"github.com/MaT1g3R/stats-tracker/components/form"
	"github.com/MaT1g3R/stats-tracker/components/pagination"
	"github.com/MaT1g3R/stats-tracker/components/selectbox"
	"github.com/MaT1g3R/stats-tracker/components/table"
	"github.com/MaT1g3R/stats-tracker/internal/app/stats"
	"github.com/MaT1g3R/stats-tracker/internal/model"
	"github.com/MaT1g3R/stats-tracker/internal/ui/layout"
	"net/url"
	"strconv"
)

type MonthOption struct {
	Value    string
	Display  string
	Selected bool
}

type CharacterOption struct {
	Value    string
	Display  string
	Selected bool
}

// LeaderboardProps contains the properties for the leaderboard page
type LeaderboardProps struct {
	Entries          []model.LeaderboardEntry
	SelectedKind     model.LeaderboardKind
	Kinds            []model.LeaderboardKind
	MonthOptions     []*MonthOption
	CharacterOptions []*CharacterOption
	CurrentPage      int
	TotalPages       int
	PageSize         int
}

func filterOnClick(myName, myValue string, additionalFilterIDs []string) string {
	filterIDStr := "["
	for _, id := range additionalFilterIDs {
		filterIDStr += "'" + id + "',"
	}
	filterIDStr += "]"
	return fmt.Sprintf("document.leaderboardFilterAction('%s', '%s', %s)", myName, myValue, filterIDStr)
}

// Leaderboard renders the leaderboard page
templ Leaderboard(props LeaderboardProps) {
	@layout.BaseLayout("/app/leaderboards") {
		<div class="container mx-auto px-4 py-8 max-w-6xl">
			<!-- Page Header -->
			<div class="mb-8 text-center">
				<h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">
					Leaderboards
				</h1>
				<p class="text-gray-600 dark:text-gray-400">
					For fun only, not official, data is not validated
				</p>
			</div>
			<!-- Controls Card -->
			<div class="mb-8">
				@card.Card() {
					<div class="p-6">
						<div class="flex flex-col md:flex-row gap-4 items-center justify-between">
							<form id="leaderboard-filters">
								<div class="flex items-center justify-start space-x-4">
									@form.Item(form.ItemProps{Class: "w-48"}) {
										@form.Label(form.LabelProps{For: "leaderboard-kind"}) {
											Leaderboard Kind
										}
										@selectbox.SelectBox() {
											@selectbox.Trigger(selectbox.TriggerProps{
												ID:       "leaderboard-kind",
												Name:     "leaderboard-kind",
												Required: true,
											}) {
												@selectbox.Value() {
													{ props.SelectedKind.Value }
												}
											}
											@selectbox.Content() {
												for _, item := range props.Kinds {
													@selectbox.Item(selectbox.ItemProps{
														Value:    item.Value,
														Selected: item.Value == props.SelectedKind.Value,
														Attributes: templ.Attributes{
															"onclick": filterOnClick("kind", item.Value, []string{}),
														},
													}) {
														{ item.Display }
													}
												}
											}
										}
									}
									if len(props.CharacterOptions) > 0 {
										@form.Item(form.ItemProps{Class: "w-48"}) {
											@form.Label(form.LabelProps{For: "leaderboard-char"}) {
												Character
											}
											@selectbox.SelectBox() {
												@selectbox.Trigger(selectbox.TriggerProps{
													ID:       "leaderboard-char",
													Name:     "leaderboard-char",
													Required: true,
												}) {
													@selectbox.Value() {
														for _, c := range props.CharacterOptions {
															if c.Selected {
																{ c.Value }
															}
														}
													}
												}
												@selectbox.Content() {
													for _, item := range props.CharacterOptions {
														@selectbox.Item(selectbox.ItemProps{
															Value:    item.Value,
															Selected: item.Selected,
															Attributes: templ.Attributes{
																"onclick": filterOnClick("char", item.Value, []string{"leaderboard-kind"}),
															},
														}) {
															{ item.Display }
														}
													}
												}
											}
										}
									}
									if len(props.MonthOptions) > 0 {
										@form.Item(form.ItemProps{Class: "w-48"}) {
											@form.Label(form.LabelProps{For: "leaderboard-month"}) {
												Month
											}
											@selectbox.SelectBox() {
												@selectbox.Trigger(selectbox.TriggerProps{
													ID:       "leaderboard-month",
													Name:     "leaderboard-month",
													Required: true,
												}) {
													@selectbox.Value() {
														for _, c := range props.MonthOptions {
															if c.Selected {
																{ c.Value }
															}
														}
													}
												}
												@selectbox.Content() {
													for _, item := range props.MonthOptions {
														@selectbox.Item(selectbox.ItemProps{
															Value:    item.Value,
															Selected: item.Selected,
															Attributes: templ.Attributes{
																"onclick": filterOnClick("month", item.Value, []string{"leaderboard-kind", "leaderboard-char"}),
															},
														}) {
															{ item.Display }
														}
													}
												}
											}
										}
									}
								</div>
							</form>
						</div>
					</div>
				}
			</div>
			<!-- Table content -->
			<div class="mb-8">
				@card.Card() {
					<div class="p-6">
						<div class="items-center">
							@Table(props)
							@PaginationWithHelper(props)
						</div>
					</div>
				}
			</div>
		</div>
	}
}

func generateLeaderboardCaption(p LeaderboardProps) string {
	base := p.SelectedKind.Display
	for _, char := range p.CharacterOptions {
		if char.Selected {
			base += " - " + char.Display
			break
		}
	}
	for _, month := range p.MonthOptions {
		if month.Selected {
			base += " - " + month.Display
			break
		}
	}
	return base
}

func formatEntry(k model.LeaderboardKind, e model.LeaderboardEntry) string {
	switch k.Value {
	case "streak":
		return strconv.Itoa(int(e.Score))
	case "winrate-monthly":
		return stats.FormatPercentage(e.Score)
	case "speedrun":
		return stats.FormatTime(int(e.Score))
	default:
		return strconv.Itoa(int(e.Score))
	}
}

templ Table(props LeaderboardProps) {
	<div class="mb-8 text-center">
		<h3 class="text-xl font-bold text-gray-900 dark:text-white mb-2">
			{ generateLeaderboardCaption(props) }
		</h3>
	</div>
	@table.Table() {
		@table.Header() {
			@table.Row() {
				@table.Head() {
					Rank
				}
				@table.Head() {
					Player
				}
				@table.Head() {
					Score
				}
				@table.Head() {
					Character
				}
				@table.Head() {
					Date Achieved
				}
			}
		}
		@table.Body() {
			for i, e := range props.Entries {
				@table.Row() {
					@table.Cell() {
						{ (1+i) + props.PageSize * (props.CurrentPage-1) }
					}
					@table.Cell() {
						<a class="transition-colors text-primary" href={ "/app/players/" + e.PlayerName }>
							{ e.PlayerName }
						</a>
					}
					@table.Cell() {
						{ formatEntry(props.SelectedKind, e) }
					}
					@table.Cell() {
						{ e.Character }
					}
					@table.Cell() {
						{ DateToString(e.Date) }
					}
				}
			}
		}
	}
}

func propsToParams(p LeaderboardProps, page int) string {
	q := url.Values{}
	q.Add("kind", p.SelectedKind.Value)
	for _, option := range p.CharacterOptions {
		if option.Selected {
			q.Add("char", option.Value)
			break
		}
	}
	for _, option := range p.MonthOptions {
		if option.Selected {
			q.Add("month", option.Value)
			break
		}
	}
	q.Add("page", strconv.Itoa(page))
	return "/app/leaderboards?" + q.Encode()
}

templ PaginationWithHelper(props LeaderboardProps) {
	{{
	p := pagination.CreatePagination(props.CurrentPage, props.TotalPages, 3)
	}}
	@pagination.Pagination() {
		@pagination.Content() {
			@pagination.Item() {
				@pagination.Previous(pagination.PreviousProps{
					Href:     propsToParams(props, p.CurrentPage-1),
					Disabled: !p.HasPrevious,
					Label:    "Previous",
				})
			}
			// First page with ellipsis if needed
			if p.Pages[0] > 1 {
				@pagination.Item() {
					@pagination.Link(pagination.LinkProps{
						Href: propsToParams(props, 1),
					}) {
						1
					}
				}
				if p.Pages[0] > 2 {
					@pagination.Item() {
						@pagination.Ellipsis()
					}
				}
			}
			// Visible pages
			for _, page := range p.Pages {
				@pagination.Item() {
					@pagination.Link(pagination.LinkProps{
						Href:     propsToParams(props, page),
						IsActive: page == p.CurrentPage,
					}) {
						{ fmt.Sprint(page) }
					}
				}
			}
			// Last page with ellipsis if needed
			if p.Pages[len(p.Pages)-1] < p.TotalPages {
				if p.Pages[len(p.Pages)-1] < p.TotalPages-1 {
					@pagination.Item() {
						@pagination.Ellipsis()
					}
				}
				@pagination.Item() {
					@pagination.Link(pagination.LinkProps{
						Href: propsToParams(props, p.TotalPages),
					}) {
						{ fmt.Sprint(p.TotalPages) }
					}
				}
			}
			@pagination.Item() {
				@pagination.Next(pagination.NextProps{
					Href:     propsToParams(props, p.CurrentPage+1),
					Disabled: !p.HasNext,
					Label:    "Next",
				})
			}
		}
	}
}
